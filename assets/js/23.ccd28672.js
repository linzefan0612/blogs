(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{287:function(e,a,t){"use strict";t.r(a);var s=t(28),n=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"实时通讯"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实时通讯"}},[e._v("#")]),e._v(" 实时通讯")]),e._v(" "),t("h2",{attrs:{id:"为什么使用-websocket"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么使用-websocket"}},[e._v("#")]),e._v(" 为什么使用 WebSocket")]),e._v(" "),t("blockquote",[t("p",[e._v("想要实时获取信息、动态等，以前的做法是使用 ajax 轮询，但是轮询的效率低，非常浪费资源（因为必须不停连接，或者 HTTP 连接始终打开）")])]),e._v(" "),t("h2",{attrs:{id:"websocket-的好处"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#websocket-的好处"}},[e._v("#")]),e._v(" WebSocket 的好处")]),e._v(" "),t("blockquote",[t("p",[e._v("它的最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，这样我们就不需要通过轮询来获取实时动态了")])]),e._v(" "),t("ol",[t("li",[e._v("建立在 TCP 协议之上，服务器端的实现比较容易。")]),e._v(" "),t("li",[e._v("与 HTTP 协议有着良好的兼容性。默认端口也是 80 和 443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。")]),e._v(" "),t("li",[e._v("数据格式比较轻量，性能开销小，通信高效。")]),e._v(" "),t("li",[e._v("可以发送文本，也可以发送二进制数据。")]),e._v(" "),t("li",[e._v("没有同源限制，客户端可以与任意服务器通信。")]),e._v(" "),t("li",[e._v("协议标识符是 ws（如果加密，则为 wss），服务器网址就是 URL。")])]),e._v(" "),t("h2",{attrs:{id:"简单示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简单示例"}},[e._v("#")]),e._v(" 简单示例")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var ws = new WebSocket("wss://echo.websocket.org");\n\nws.onopen = function(evt) {\n  console.log("Connection open ...");\n  ws.send("Hello WebSockets!");\n};\n\nws.onmessage = function(evt) {\n  console.log( "Received Message: " + evt.data);\n  ws.close();\n};\n\nws.onclose = function(evt) {\n  console.log("Connection closed.");\n};\n\n')])])]),t("h2",{attrs:{id:"api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[e._v("#")]),e._v(" API")]),e._v(" "),t("h3",{attrs:{id:"websocket-构造函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#websocket-构造函数"}},[e._v("#")]),e._v(" WebSocket 构造函数")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let ws = new WebSocket('ws://接口Url');\n")])])]),t("h3",{attrs:{id:"readystate"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#readystate"}},[e._v("#")]),e._v(" readyState")]),e._v(" "),t("blockquote",[t("p",[e._v("readyState 属性返回实例对象的当前状态，共有四种。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("CONNECTING：值为0，表示正在连接。\nOPEN：值为1，表示连接成功，可以通信了。\nCLOSING：值为2，表示连接正在关闭。\nCLOSED：值为3，表示连接已经关闭，或者打开连接失败。\n")])])]),t("h3",{attrs:{id:"onopen"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#onopen"}},[e._v("#")]),e._v(" onopen")]),e._v(" "),t("blockquote",[t("p",[e._v("用于指定连接成功后的回调函数")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("ws.onopen = function () {\n  ws.send('Hello Server!');\n}\n")])])]),t("blockquote",[t("p",[e._v("如果要指定多个回调函数，可以使用 addEventListener 方法")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("ws.addEventListener('open', function (event) {\n  ws.send('Hello Server!');\n});\n")])])]),t("h3",{attrs:{id:"onclose"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#onclose"}},[e._v("#")]),e._v(" onclose")]),e._v(" "),t("blockquote",[t("p",[e._v("用于指定连接关闭后的回调函数")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('ws.onclose = function(event) {\n  var code = event.code;\n  var reason = event.reason;\n  var wasClean = event.wasClean;\n  // handle close event\n};\n\nws.addEventListener("close", function(event) {\n  var code = event.code;\n  var reason = event.reason;\n  var wasClean = event.wasClean;\n  // handle close event\n});\n')])])]),t("h3",{attrs:{id:"onmessage"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#onmessage"}},[e._v("#")]),e._v(" onmessage")]),e._v(" "),t("blockquote",[t("p",[e._v("用于指定收到服务器数据后的回调函数")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('ws.onmessage = function(event) {\n  var data = event.data;\n  // 处理数据\n};\n\nws.addEventListener("message", function(event) {\n  var data = event.data;\n  // 处理数据\n});\n')])])]),t("blockquote",[t("p",[e._v("服务器数据可能是文本，也可能是二进制数据(blob 对象或 Arraybuffer 对象)")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('ws.onmessage = function(event){\n  \x3c!-- 文本字符串 --\x3e\n  if(typeof event.data === String) {\n    console.log("Received data string");\n  }\n\n  \x3c!-- 二进制对象 --\x3e\n  if(event.data instanceof ArrayBuffer){\n    var buffer = event.data;\n    console.log("Received arraybuffer");\n  }\n}\n')])])]),t("h3",{attrs:{id:"send"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#send"}},[e._v("#")]),e._v(" send")]),e._v(" "),t("blockquote",[t("p",[e._v("用于向服务器发送数据")])]),e._v(" "),t("h4",{attrs:{id:"发送文本的例子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#发送文本的例子"}},[e._v("#")]),e._v(" 发送文本的例子")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("ws.send('your message');\n")])])]),t("h4",{attrs:{id:"发送-blob-对象的例子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#发送-blob-对象的例子"}},[e._v("#")]),e._v(" 发送 Blob 对象的例子")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var file = document.querySelector('input[type=\"file\"]').files[0];\nws.send(file);\n")])])]),t("h4",{attrs:{id:"发送-arraybuffer-对象的例子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#发送-arraybuffer-对象的例子"}},[e._v("#")]),e._v(" 发送 ArrayBuffer 对象的例子")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var img = canvas_context.getImageData(0, 0, 400, 320);\nvar binary = new Uint8Array(img.data.length);\nfor (var i = 0; i < img.data.length; i++) {\n  binary[i] = img.data[i];\n}\nws.send(binary.buffer);\n")])])]),t("h2",{attrs:{id:"onerror"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#onerror"}},[e._v("#")]),e._v(" onerror")]),e._v(" "),t("blockquote",[t("p",[e._v("用于指定报错时的回调函数。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('socket.onerror = function(event) {\n  // handle error event\n};\n\nsocket.addEventListener("error", function(event) {\n  // handle error event\n});\n')])])])])}),[],!1,null,null,null);a.default=n.exports}}]);