(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{278:function(o,e,t){"use strict";t.r(e);var s=t(28),l=Object(s.a)({},(function(){var o=this,e=o.$createElement,t=o._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":o.$parent.slotKey}},[t("h1",{attrs:{id:"正则表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式"}},[o._v("#")]),o._v(" 正则表达式")]),o._v(" "),t("blockquote",[t("p",[o._v("ps 其实现在都不会自己写正则啦，百度 CV！")])]),o._v(" "),t("h2",{attrs:{id:"何为正则？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#何为正则？"}},[o._v("#")]),o._v(" 何为正则？")]),o._v(" "),t("p",[o._v("正则表达式，简单来说就是一套规则\n规则是程序员自己定的，用来判断页面的某个内容是否匹配你这个规则")]),o._v(" "),t("h2",{attrs:{id:"使用规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用规则"}},[o._v("#")]),o._v(" 使用规则")]),o._v(" "),t("p",[o._v("你要用正则，就需要先 new 一个正则对象\nRegExp 正则对象\nnew RegExp(规则);\n调用 test 方法来判断是否符合规则，符合得到 true，不符合得到 false\n正则字面量创建： /规则/ 记得//中间要写规则")]),o._v(" "),t("h2",{attrs:{id:"如何使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何使用"}},[o._v("#")]),o._v(" 如何使用")]),o._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[o._v("// 正则也有字面量创建方法，正则的符号：/规则/ 就是正则符号\n\nvar reg = /男/; //等同于var reg = new RegExp('男');\nconsole.log(reg.test('强人锁男')); //true\nconsole.log(reg.test('左右为男')); //true\n\n// 判断内容是否包含女\nconsole.log(/女/.test('2020大家都能找到女朋友')); //true\n")])])]),t("h2",{attrs:{id:"正则分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正则分类"}},[o._v("#")]),o._v(" 正则分类")]),o._v(" "),t("h3",{attrs:{id:"预定义类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#预定义类"}},[o._v("#")]),o._v(" 预定义类")]),o._v(" "),t("p",[o._v("预定义类：其实正则里提前规定好的一些特殊符号，用来表达对应的意思")]),o._v(" "),t("ul",[t("li",[o._v(". ： 代表判断内容是否有 除了\\r，\\n 以外")]),o._v(" "),t("li",[o._v("\\d : 只要有数字（有没有 0")]),o._v(" "),t("li",[o._v("\\D ： 只要有非数字(除了 0 到 9 以")]),o._v(" "),t("li",[o._v("\\s ： 不可见字符，你打印的时候看不到，例如：空格，再例如\\r \\n")]),o._v(" "),t("li",[o._v("\\S ： 可")]),o._v(" "),t("li",[o._v("\\w ： 单词字符（ 字母、数字、下划")]),o._v(" "),t("li",[o._v("\\W ： 非单词字符（找除了字母、数字、下划线以外的）")])]),o._v(" "),t("h4",{attrs:{id:"demo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#demo"}},[o._v("#")]),o._v(" Demo")]),o._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[o._v('// console.log(/./.test(\'哈哈哈\')); //true\n// console.log(/./.test(\'\\r\')); //false\n// console.log(/./.test(\'\\n\')); //false\n// console.log(/./.test(\'\\na\')); //true\n// console.log(/./.test(\'\\n \')); //true\n// console.log(/./.test("\\r")); //false\n// console.log(/./.test("\\r\\n")); //false\n// console.log(/./.test("" + ""));   //false   得到空字符串,空字符串是啥都没有，就是false\n// console.log(/./.test("\\r1"));//true\n// console.log(/./.test("32435dh1"));//true\n// console.log(/./.test("d"));//true\n\n//---------\\d\t数字字符--------------------------------------\n// console.log(/\\d/.test("abc"));  //false\n// console.log(/\\d/.test("!@#$"));  //false\n// console.log(/\\d/.test("!@#$adfgethfe")); //false\n// console.log(/\\d/.test("!@#$adfgethfe1"));  //true\n// console.log(/\\d/.test("123456"));  //true\n\n//---------\\D\t\t非数字字符--------------------------------------\n//test检测： 只要被检测的字符串中包含了非数字字符,那么结果就是true.\n// console.log(/\\D/.test("abc"));   //true\n// console.log(/\\D/.test("!@#$"));  //true\n// console.log(/\\D/.test("!@#$adfgethfe"));//true\n// console.log(/\\D/.test("!@#$adfgethfe1")); //true\n// console.log(/\\D/.test("13243546b576871")); //true\n// console.log(/\\D/.test("123456")); //false\n\n//--------\\s  不可见字符-----------------------------------------\n// console.log(/\\s/.test("abc\\r")); //true\n// console.log(/\\s/.test("abc\\n")); //true\n// console.log(/\\s/.test("abc\\r\\n"));//true\n// console.log(/\\s/.test(" "));    //true\n// console.log(/\\s/.test("" + ""));   //false  拼接后变成空字符串,空字符串毛都没有，你说要找不可见字符就找不到，找不到得false\n// console.log(/\\s/.test("\\r\\n\\t\\r")); //true\n// console.log(/\\s/.test("abcdeg")); //false\n// console.log(/\\s/.test("12354676")); //false\n// console.log(/\\s/.test("12354676aahgrjtj")); //false\n// console.log(/\\s/.test("12354676aahgrjtj!@#$"));//false\n\n //--------\\S  可见字符-----------------------------------------\n// console.log(/\\S/.test("abc\\r"));  //true\n// console.log(/\\S/.test("abc\\n"));   //true\n// console.log(/\\S/.test("abc\\r\\n"));   //true\n// console.log(/\\S/.test(" "));   //false\n// console.log(/\\S/.test("\\r\\n\\t\\r"));  //false\n// console.log(/\\S/.test("abcdeg"));  //true\n\n//------ \\w 单词字符(所有的字母数字和_)--------------------------------\n// console.log(/\\w/.test("!@#$%#@#$%$#@"));  //false\n// console.log(/\\w/.test("!@#$%#@#$%$#@a")); //true\n// console.log(/\\w/.test("!@#$%#@0#$%$#@"));  //true\n// console.log(/\\w/.test("!@#$%#@_#$%$#@"));  //true\n// console.log(/\\w/.test("!!!!!1234567")); //true\n// console.log(/\\w/.test("!!!!!")); //false\n\n//------ \\W 非单词字符(所有的字母数字和_ 简单来说找特殊符号)--------------------------------\n//    console.log(/\\W/.test("abcserge3")); //false\n//    console.log(/\\W/.test("fsdgetherg!"));//true\n//    console.log(/\\W/.test("!123456@"));//true\n//    console.log(/\\W/.test("!@#$%#@_#$%$#@"));//true\n//    console.log(/\\W/.test("!!!!!1234567"));//true\n//    console.log(/\\W/.test("!!!!!"));//true\n\n\n')])])]),t("h3",{attrs:{id:"自定义类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义类"}},[o._v("#")]),o._v(" 自定义类")]),o._v(" "),t("p",[o._v("自定义类：就是自己设置的内容")]),o._v(" "),t("h4",{attrs:{id:"demo-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#demo-2"}},[o._v("#")]),o._v(" Demo")]),o._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[o._v('//  找数字\n//  console.log(/\\d/.test(123) );//true\n\n//  这个代表找有没有d这个单词\n//  console.log(/d/.test(123) ); //false\n\n//  找有没有@这个符号\n//  console.log(/@/.test(123) ); //false\n//  console.log(/@/.test(\'dsada@dsd.com\') ); //true\n\n\n//  自定义类\n//  你用test检测的字符串里面，有没有包含d这个字母。如果有就是true.\n// console.log(/d/.test("123")); //false\n// console.log(/d/.test("123d")); //true\n\n\n\n//你用test检测的字符串里面， 有没有包含nihao，，如果有就是true.\n// console.log(/nihao/.test("ni")); //false\n// console.log(/nihao/.test("hao"));  //false\n// console.log(/nihao/.test("nihao"));  //true\n// console.log(/nihao/.test("ninihaohao")); //true\n// console.log(/nihao/.test("nini.haohao")); //false\n// console.log(/nihao/.test("nihaonihao")); //true\n// console.log(/nihao/.test("你好不好,hao")); //false\n// console.log(/nihao/.test("ni2hao3")); //false\n\n\n// 参数：\n// i: 忽略大小写\n// g：全局匹配（暂时无法演示）\n\nconsole.log(/a/.test(\'aaaaaaaa\')); //true\nconsole.log(/a/.test(\'AAAAAAAA\')); //false\n\n// 忽略大小写\nconsole.log(/a/i.test(\'AAAAAAAA\')); //true\n')])])]),t("h3",{attrs:{id:"或和优先级"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#或和优先级"}},[o._v("#")]),o._v(" 或和优先级")]),o._v(" "),t("p",[o._v("在正则里一个 | 就代表或，就是要么匹配左边，要么匹配右边\n()代表优先级，先用小括号得到结果")]),o._v(" "),t("h4",{attrs:{id:"demo-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#demo-3"}},[o._v("#")]),o._v(" Demo")]),o._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[o._v('// 要么有ni，要么有hao\n// console.log(/ni|hao/.test("ni")); //true\n// console.log(/ni|hao/.test("hao"));  //true\n// console.log(/ni|hao/.test("nihao")); //true\n// console.log(/ni|hao/.test("ninihaohao"));  //true\n// console.log(/ni|hao/.test("nihaonihao"));  //true\n// console.log(/ni|hao/.test("ni真牛"));  //true\n// console.log(/ni|hao/.test("nhiao")); //false\n\n// 先小括号得到结果，要么有h要么有a，然后跟外面组合，得到要么niho 要么niao\n// 最终找heia或者hema\n// console.log(/ni(h|a)o/.test("ni")); //false\n// console.log(/ni(h|a)o/.test("hao")); //false\n// console.log(/ni(h|a)o/.test("nihao")); //false\n// console.log(/ni(h|a)o/.test("niho")); //true\n// console.log(/ni(h|a)o/.test("niao")); //true\n// console.log(/ni(h|a)o/.test("nihaonihao")); //false\n// console.log(/ni(h|a)o/.test("nihonihao")); //true\n// console.log(/ni(h|a)o/.test("nihaonihaoniao"));//true\n// console.log(/ni(h|a)o/.test("nihnihonihao"));//true\n// console.log(/ni(h|a)o/.test("nihaoniao")); //false\n')])])]),t("h3",{attrs:{id:"简单类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简单类"}},[o._v("#")]),o._v(" 简单类")]),o._v(" "),t("p",[o._v("[]：代表只要出现中括号中的某一个都算匹配")]),o._v(" "),t("h4",{attrs:{id:"demo-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#demo-4"}},[o._v("#")]),o._v(" Demo")]),o._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[o._v('// 132a中某一个\n// console.log(/[132a]/.test(\'abcdefg\')); //true\n\n// 找132a\n// console.log(/132a/.test(\'abcdefg\')); //false\n\n// 找abc中的任意一个\n// console.log(/[abc]/.test("a")); //true\n// console.log(/[abc]/.test("b")); //true\n// console.log(/[abc]/.test("c")); //true\n// console.log(/[abc]/.test("123456a")); //true\n// console.log(/[abc]/.test("123456abcabc")); //true\n// console.log(/[abc]/.test("123456"));//false\n// console.log(/[abc]/.test("ddddddddd!!!!!!"));//false\n// console.log(/[abc]/.test("dddddbdddd!!!!!!"));//true\n// console.log(/[abc]/.test("dddddBdddd!!!!!!")); //false\n\n// 忽略大小写（不区分大小写）\n// console.log(/[abc]/i.test("dddddBdddd!!!!!!")); //true\n\n// 中间是要么a要么b要么c，所以最终组成 yaz 或者 ybz 或者 ycz\n// console.log(/y[abc]z/.test("yaz"));  //true\n// console.log(/y[abc]z/.test("ybz"));  //true\n// console.log(/y[abc]z/.test("ycz"));  //true\n// console.log(/y[abc]z/.test("yz"));  //false\n// console.log(/y[abc]z/.test("yabcz")); //false\n// console.log(/y[abc]z/.test("yazybzycz")); //true\n\n// 找yaaz  ybbz yccz\nconsole.log(/y(aa|bb|cc)z/.test("yaaz")); //true\n')])])]),t("h3",{attrs:{id:"负向类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#负向类"}},[o._v("#")]),o._v(" 负向类")]),o._v(" "),t("p",[o._v("[^] 负向类,不能有这些,匹配到没有的")]),o._v(" "),t("h4",{attrs:{id:"demo-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#demo-5"}},[o._v("#")]),o._v(" Demo")]),o._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[o._v("console.log(/[^abc]/.test('a')); //false\nconsole.log(/[^abc]/.test('ad')); //true\n\n\nconsole.log(/[^abc]/.test('abcabc'));//false\nconsole.log(/[^abc]/.test('abcabcd'));//true\nconsole.log(/[^abc]/.test('ad')); //true\n")])])]),t("h3",{attrs:{id:"组合类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组合类"}},[o._v("#")]),o._v(" 组合类")]),o._v(" "),t("p",[o._v("组合类：把多个组合在一起\n在正则中-代表到  所以a-z 就是从a到z任意一个字母")]),o._v(" "),t("h4",{attrs:{id:"demo-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#demo-6"}},[o._v("#")]),o._v(" Demo")]),o._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[o._v('// 找要么a-m之间的要么1-5之间的\n// [a-m1-5]相当于写的是 [abcdefghijklm12345]。只要找到中间某一个\n// console.log(/[a-m1-5]/.test("b")); //true  \n// console.log(/[a-m1-5\\n]/.test("2")) //true\n// console.log(/[a-m1-5]/.test("65666"))//true\n// console.log(/[a-m1-5]/.test("6666")) //false\n// console.log(/[a-m1-5\\n]/.test("ttttyyyyzzz66666"))//false\n\n\n// 要有2个字符\n// 左边要满足不是0-5，右边要满足不是a-g\n// console.log(/[^0-5][^a-g]/.test("6z"));  //true\n// console.log(/[^0-5][^a-g]/.test("6z7y")); //true\n// console.log(/[^0-5][^a-g]/.test("4")); //false\n// console.log(/[^0-5][^a-g]/.test("4b")); //false\n// console.log(/[^0-5][^a-g]/.test("4yaaabbbccc")); //false\n// console.log(/[^0-5][^a-g]/.test("4yaaabbbc7cc"));   //true \n// console.log(/[^0-5][^a-g]/.test("4yaaabbbc7cc9x"));  //true\n\n\n// 因为有或代表1位就行了，要么满足不是0-5，要么满足不是a-g\n// console.log(/[^0-5]|[^a-g]/.test("4b"));  //true\n// console.log(/[^0-5]|[^a-g]/.test("2"));    //true\n\n// 要么满足不是0-7 要么满足不是5-9\n// console.log(/[^0-7]|[^5-9]/.test("8"));    //true\n// console.log(/[^0-7]|[^5-9]/.test("5"));  //false\n// console.log(/[^0-7]|[^5-9]/.test("567")); //false\n// console.log(/[^0-7]|[^5-9]/.test("5678"));   //true\n\n// 要么满足不是0-7 要么满足 三位数(第一位不是5-9，第二位abcd任何一个，第三位固定a)\n// console.log(/[^0-7]|[^5-9][abcd]a/.test("5678"));   //true\n\n// 第一位： 要么可满足不是0-7 要么满足不是5-9\n// 第二位：abcd随便一个\n// 第三位：a\n// console.log(/([^0-7]|[^5-9])[abcd]a/.test("5678"));   //false\n// console.log(/([^0-7]|[^5-9])[abcd]a/.test("aaa"));   //true\n// console.log(/([^0-7]|[^5-9])[abcd]a/.test("aaaa"));   //true\n// console.log(/([^0-7]|[^5-9])[abcd]a/.test("aaab"));   //true\n// console.log(/([^0-7]|[^5-9])[abcd]a/.test("aa"));   //false\n')])])]),t("h3",{attrs:{id:"边界类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#边界类"}},[o._v("#")]),o._v(" 边界类")]),o._v(" "),t("p",[o._v("[^] 负向类\n^： 以什么开头\n$： 以什么结尾")]),o._v(" "),t("h4",{attrs:{id:"demo-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#demo-7"}},[o._v("#")]),o._v(" Demo")]),o._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[o._v('a. ^ 会匹配行或者字符串的起始位置\n// console.log(/\\d/.test("aaabb123ccc"));   //true\n\n// 这个代表找以数字开头\n// console.log(/^\\d/.test("aaabb123ccc"));  //false\n// console.log(/^\\d/.test("1aaabb123ccc")); //true\n// console.log(/^\\d/.test("1aaabbccc")); //true\n\n// 以6a开头\n// console.log(/^6a/.test("6666677776abbbb")); //false\n// console.log(/^6a/.test("6a7777777")); //true\n// console.log("=====================================");\n// console.log(/^6/.test("6"));  //true\n// console.log(/^6/.test("76")); //false\n\n// 以6和除了\\r\\n以外的字符以及a 开头\n// console.log(/^6.a/.test("666abat "));  //false\n// console.log(/^6.a/.test("66abat ")); //true\n// console.log(/^6.a/.test("6*abat ")); //true\n// console.log(/^6.a/.test("6\\nabat ")); //false\n\n// +是修饰它前一位的，代表让它前一位出现一次或多次\n// 以6开头，6出现至少1次，最多不限。后面必须接a\n// console.log(/^6+a/.test("6666a77776abbbb"));  //true\n// console.log(/^6+a/.test("6a77776abbbb"));  //true\n// console.log(/^6+a/.test("66666667a77776abbbb"));  //false\n// console.log(/^6+a/.test("6666666aa77776abbbb"));  //true\n\n----------------------------------------------------------\n\nb.$ 会匹配行或字符串的结尾位置\n// console.log(/ac/.test("ac777")); //true\n// console.log(/ac/.test("77ac7")); //true\n\n// 以ac结尾\n// console.log(/ac$/.test("ac777")); //false\n// console.log(/ac$/.test("777ac")); //true\n\n//  严格匹配  只能出现一次\n//  console.log(/^bc/.test("bcbcbc")); //bc开头，true\n//  console.log(/bc$/.test("bcbcbc")); //bc结尾，true\n \n//  有^和$就代表严格匹配，中间的内容就是它只能出现的内容，只能出现1次\n//  console.log(/^bc$/.test("bcbcbc")); //false\n\n// 只要有bc就可以了\n// console.log(/bc/.test("bcbcbc")); //true\n// console.log(/^bc$/.test("bc")); //true\n// console.log(/\\d/.test(\'abdsfdsfgd1\')); //true\n// console.log(/^\\d$/.test(\'abdsfdsfgd1\')); //false\n// console.log(/^\\d$/.test(\'111111\')); //false\n// console.log(/^\\d$/.test(\'1\')); //true\n// console.log(/^\\d$/.test(\'1\')); //true\n// console.log(/^\\d+$/.test(\'132334523\')); //true\n// console.log(/^\\d+$/.test(\'132334523a\')); //false\n')])])]),t("h3",{attrs:{id:"严格匹配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#严格匹配"}},[o._v("#")]),o._v(" 严格匹配")]),o._v(" "),t("p",[o._v("^ 以什么开头\n$ 以什么结尾\n^ 和 $  符合中间要求的只能出现一次,不能有别的东西")]),o._v(" "),t("h4",{attrs:{id:"demo-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#demo-8"}},[o._v("#")]),o._v(" Demo")]),o._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[o._v('//  console.log(/abc/.test("abc"));  //true\n//  console.log(/abc/.test("abcabcabc")); //tru\n\n//   console.log(/^abc$/.test("abcabcabc"));  //false\n//   console.log(/^abc$/.test("abc"));  //true\n//   console.log(/^abc$/.test("abc1")); //false\n//   console.log(/^abc$/.test("aabc")); //false\n\n//自定义类,只要检测的字符串中包含数字就是true.\n\n//    console.log(/\\d/.test("1")); //true\n//    console.log(/\\d/.test("12345"));//true\n//    console.log(/\\d/.test("abc12345def"));//true\n//    console.log(/\\d/.test("abc1"));//true\n//    console.log(/^\\d$/.test("1")); //true\n//    console.log(/^\\d$/.test("12345")); //false\n//    console.log(/^\\d$/.test("abc12345def"));//false\n//    console.log(/^\\d$/.test("abc1def"));//false\n//    console.log(/^\\d$/.test("abc1"));//false\n//    console.log(/^\\d$/.test("a"));//false\n\n// {2} 代表必须出现2次\n// 必须有2位数字，不能别的东西\n// console.log(/^\\d{2}$/.test("22"));//true\n// console.log(/^\\d{2}$/.test("223"));//false\n// console.log(/^\\d{2}$/.test("22b"));//false\n// console.log(/^\\d$/.test("9"));//true\n\n// abc加任意数字 不能有别的东西了\n//    console.log(/^abc\\d$/.test("abc7"));//true\n//    console.log(/^abc\\d$/.test("abc7abc9")); //false\n//    console.log(/abc\\d/.test("abc7abc9"));//true\n')])])]),t("h3",{attrs:{id:"量词"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#量词"}},[o._v("#")]),o._v(" 量词")]),o._v(" "),t("ul",[t("li",[o._v('"*"\t重复零次或更多 x>=0          {0,}    //次数要 >= 0')]),o._v(" "),t("li",[o._v('"+"\t重复一次或更多次 x>=1        {1,}    // 至少1次')]),o._v(" "),t("li",[o._v('"?"\t重复零次或一次  x=(0||1)     {0,1}')]),o._v(" "),t("li",[o._v("{n}\tn次\tx=n                             // 必须匹配n次，例{5} ，必须有5次")]),o._v(" "),t("li",[o._v("{n,}\t重复n次或更多  x>=n                // 至少n次，多了不限 例： {5,} 至少5次，多了随便")]),o._v(" "),t("li",[o._v("{n,m} 重复出现的次数比n多但比m少 n<=x<=m  // n次以上，m次以下  例：  {5,8} 至少5次，最多8次")])]),o._v(" "),t("h4",{attrs:{id:"demo-9"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#demo-9"}},[o._v("#")]),o._v(" Demo")]),o._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[o._v('1. *  重复零次或更多 x>=0 \n// 只要有color\n// console.log(/color/.test("color"));  //true\n// console.log(/color/.test("colorcolor"));  //true\n\n// 严格匹配的内容是： colo(0次或多次)r  例： colr  color  coloor colooooooor\n// console.log(/^colo*r$/.test("colr")); //true\n\n//  console.log(/^colo*r$/.test("color")); //true\n//  console.log(/^colo*r$/.test("coloor")); //true\n//  console.log(/^colo*r$/.test("colooor")); //true\n//  console.log(/^colo*r$/.test("colooorcolooor"));//false  \n//  console.log(/^colo*r$/.test("olooor"));  //false\n\n//  整体的color可以没有，或者有多次\n//   console.log(/^(color)*$/.test(""));//true\n//   console.log(/^(color)*$/.test("1"));//false\n//   console.log(/^(color)*$/.test("color")); //true\n//   console.log(/^(color)*$/.test("colorcolor"));//true\n//   console.log(/^(color)*$/.test("colorcolorcolor"));//true\n//   console.log(/^(color)*$/.test("1colorcolorcolor")); //false\n\n//   没有*了，只能有1个color\n//   console.log(/^(color)$/.test("colorcolorcolor"));  //false\n\n2. + ：1次或多次\n    \n// l后面的那个o至少出现1次\n//  console.log(/^colo+r$/.test("colr"));  //false\n//  console.log(/^colo+r$/.test("color")); //true\n//  console.log(/^colo+r$/.test("coloor")); //true\n//  console.log(/^colo+r$/.test("colooor")); //true\n//  console.log(/^colo+r$/.test("colooorcolooor"));   //false\n\n\n\n3. ? 0或1次\n// l后面的o要么有1次要么没有，并且严格匹配\n// console.log(/^colo?r$/.test("colr")); //true\n// console.log(/^colo?r$/.test("color")); //true\n// console.log(/^colo?r$/.test("coloor")); //false\n// console.log(/^colo?r$/.test("colooor")); //false\n// console.log(/^colo?r$/.test("colooorcolooor")); //false  \n// console.log(/^colo?r$/.test("colorcolor"));   //false\n\n4. {n} n次\tx=n  \n// 必须符合 coloor ,其他一切都不行\n// console.log(/^colo{2}r$/.test("colr")); //false\n// console.log(/^colo{2}r$/.test("color"));//false\n// console.log(/^colo{2}r$/.test("coloor"));//true\n// console.log(/^colo{2}r$/.test("colooor"));//false\n// console.log(/^colo{2}r$/.test("coloorcoloor"));  //false\n// console.log(/^colo{2}r$/.test("coloorc")); //false\n\n\n5. {n,}  重复n次或更多  x>=n \n// coloor 或者 colooooooooooooor 等，l后面的o至少2次\n// console.log(/^colo{2,}r$/.test("colr")); //false\n// console.log(/^colo{2,}r$/.test("color")); //false\n// console.log(/^colo{2,}r$/.test("coloor"));//true\n// console.log(/^colo{2,}r$/.test("colooor"));//true\n// console.log(/^colo{2,}r$/.test("coloorcoloor"));  //false\n\n\n6. {n,m} 重复出现的次数比n多但比m少 n<=x<=m\n// 只能匹配coloor  或者 colooor\n// console.log(/^colo{2,3}r$/.test("colr"));  //false\n// console.log(/^colo{2,3}r$/.test("color")); //false\n// console.log(/^colo{2,3}r$/.test("coloor")); //true\n// console.log(/^colo{2,3}r$/.test("colooor"));//true\n// console.log(/^colo{2,3}r$/.test("coloooor"));//false\n// console.log(/^colo{2,3}r$/.test("coloorcoloor"));  //false\n')])])])])}),[],!1,null,null,null);e.default=l.exports}}]);