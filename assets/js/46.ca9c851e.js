(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{258:function(a,e,t){"use strict";t.r(e);var r=t(28),s=Object(r.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"常用-api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用-api"}},[a._v("#")]),a._v(" 常用 Api")]),a._v(" "),t("blockquote",[t("p",[a._v("一些常见的 Api 操作方法")])]),a._v(" "),t("h2",{attrs:{id:"数组-api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组-api"}},[a._v("#")]),a._v(" 数组 Api")]),a._v(" "),t("ul",[t("li",[a._v("concat()：连接两个或多个数组")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var myGirls = ["Cecilie", "Lone"];\nvar myBoys = ["Emil", "Tobias", "Linus"];\nvar myChildren = myGirls.concat(myBoys);   // ["Cecilie", "Lone","Emil", "Tobias", "Linus"]\n')])])]),t("ul",[t("li",[a._v("join()：把数组中的所有元素放入一个字符串中")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var arr = new Array(3);\narr[0] = "A";\narr[1] = "B";\narr[2] = "C";\narr.join(-):  // \'A-B-C\'\n')])])]),t("ul",[t("li",[a._v("splice()：删除或者添加数据")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var fruits = ["Banana", "Orange", "Apple", "Mango"];\nfruits.splice(2, 0, "Lemon", "Kiwi");  // ["Banana", "Orange", "Apple","Lemon", "Kiwi", "Mango"]\n第一个参数定义了开始位置。\n第二个参数定义应删除多少元素。\n第三个参数定义要添加的新元素。\n')])])]),t("ul",[t("li",[a._v("slice() ：用数组的某个片段切出新数组。")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];\nvar citrus = fruits.slice(1, 3);    // [Orange,Lemon]\n参数1，开始位置\n参数2，截止位置，不包括本身\n')])])]),t("ul",[t("li",[a._v("toString() ：把数组转换为（逗号分隔）的字符串。")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var fruits = ["Banana", "Orange", "Apple", "Mango"];\nfruits.toString() // Banana,Orange,Apple,Mango\n')])])]),t("ul",[t("li",[a._v("pop()： 删除数组最后一个元素")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var fruits = ["Banana", "Orange", "Apple", "Mango"];\nfruits.pop();  // 从 fruits 删除最后一个元素（"Mango"）\n')])])]),t("ul",[t("li",[a._v("push()：在数组结尾处向数组添加一个新的元素")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var fruits = ["Banana", "Orange", "Apple", "Mango"];\nfruits.push("Kiwi");  //  向 fruits 添加一个新元素\n')])])]),t("ul",[t("li",[a._v("shift() ：删除数组首个元素")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var fruits = ["Banana", "Orange", "Apple", "Mango"];\nfruits.shift();  // 从 fruits 删除第一个元素 "Banana"\n')])])]),t("ul",[t("li",[a._v("unshift()：（在开头）向数组添加新元素")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var fruits = ["Banana", "Orange", "Apple", "Mango"];\nfruits.unshift("Ha");  // 给 fruits 数组第一个添加元素 "Ha"\n')])])]),t("ul",[t("li",[a._v("reverse()：翻转数组")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var fruits = ["Banana", "Orange", "Apple", "Mango"];\nfruits.reverse()  // ["Mango", "Apple", "Orange", "Banana"]\n')])])]),t("h2",{attrs:{id:"字符串-api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串-api"}},[a._v("#")]),a._v(" 字符串 Api")]),a._v(" "),t("ul",[t("li",[a._v("split() ：将字符串转换为数组")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var txt = "a,b,c,d,e";   // 字符串\ntxt.split(",");  // [a,b,c,d,e]\n')])])]),t("ul",[t("li",[a._v("indexOf(item,start)：返回字符串中指定文本首次出现的索引")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("参数1为查找的元素\n参数2位开始的位置\nvar arr = [1,2,3]\narr.indexOf(2) // 1,找出2这个元素\narr.indexOf(2,2) // -1,找出2，并且下标为2的的元素\n")])])]),t("ul",[t("li",[a._v("lastIndexOf()：返回指定文本在字符串中最后一次出现的索引,与 indexOf 相反,但找不到也是返回-1")]),a._v(" "),t("li",[a._v("slice()：提取字符串的某个部分并在新字符串中返回被提取的部分")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var str = "Apple, Banana, Mango";\nvar res = str.slice(7,13);       // Banana\n// 如果省略第二个参数，则该方法将裁剪字符串的剩余部分\nvar str = "Apple, Banana, Mango";\nvar res = str.slice(7);       // Banana, Mango\n// 如果某个参数为负，则从字符串的结尾开始计数。\nvar str = "Apple, Banana, Mango";\nvar res = str.slice(-13,-7);  // Banana\n')])])]),t("ul",[t("li",[a._v("substring()：与 slice()相似，不同之处，是不能接受负的索引")]),a._v(" "),t("li",[a._v("substr()：与 slice()相似，不同之处在于第二个参数规定被提取部分的长度")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var str = "Apple, Banana, Mango";\nvar res = str.substr(7,6);     // Banana\n// 如果省略第二个参数，则该 substr() 将裁剪字符串的剩余部分。\n')])])]),t("ul",[t("li",[a._v("replace()：用另一个值替换在字符串中指定的值")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('str = "Please visit Microsoft!";\nvar n = str.replace("Microsoft", "W3School");\nreplace() 方法不会改变改变它原有的字符串，它返回的是新字符串。\n// 默认地，replace() 只替换首个匹配\n// 默认地，replace() 对大小写敏感\n')])])]),t("ul",[t("li",[a._v("toUpperCase() ：把字符串转换为大写")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var text1 = "Hello World!";\nvar text2 = text1.toUpperCase();  // "HELLO WORLD!"\n')])])]),t("ul",[t("li",[a._v("toLowerCase()：把字符串转换为小写")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var text1 = "Hello World!";       // 字符串\nvar text2 = text1.toLowerCase();  // text2 是被转换为小写的 text1\n')])])]),t("ul",[t("li",[a._v("concat()： 连接两个或多个字符串")]),a._v(" "),t("li",[a._v("trim() ：删除字符串两端的空白符")]),a._v(" "),t("li",[a._v("charAt()：方法返回字符串中指定下标（位置）的字符串")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var str = "HELLO WORLD";\nstr.charAt(0);            // 返回 H\n')])])]),t("ul",[t("li",[a._v("charCodeAt() ：返回字符串中指定索引的字符 unicode 编码")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var str = "HELLO WORLD";\nstr.charCodeAt(0);         // 返回 72\n')])])]),t("h2",{attrs:{id:"json-对象与字符串的互相转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#json-对象与字符串的互相转换"}},[a._v("#")]),a._v(" json 对象与字符串的互相转换")]),a._v(" "),t("ol",[t("li",[a._v("JSON 字符串 转成 对象")])]),a._v(" "),t("ul",[t("li",[a._v("JSON.parse(jsonStr)")])]),a._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[a._v("对象 转成 JSON 字符串")])]),a._v(" "),t("ul",[t("li",[a._v("JSON.stringify(obj)")])]),a._v(" "),t("h2",{attrs:{id:"数组循环"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组循环"}},[a._v("#")]),a._v(" 数组循环")]),a._v(" "),t("h3",{attrs:{id:"for"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#for"}},[a._v("#")]),a._v(" for")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var arr = [1,2,3,4]\nfor(var i =0; i<arr.length;i++){\n  consolo.log(i)  // 1,2,3,4\n}\n")])])]),t("h3",{attrs:{id:"foreach"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#foreach"}},[a._v("#")]),a._v(" forEach")]),a._v(" "),t("blockquote",[t("p",[a._v("array.forEach(function(currentValue, index, arr), thisValue)")])]),a._v(" "),t("ul",[t("li",[a._v("forEach 循环我们可以直接取到元素，同时也可以取到 index 值。但是 forEach 也有一些局限，不能 continue 跳过或者 break 终止循环")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var numbers = [65, 44, 12, 4];\nnumbers.forEach(item,i,arr){\n  consolo.log(item +\',\'+ i+\',\' + arr)  // 65,0,[65, 44, 12, 4]\n}\n// 对应参数\ncurrentValue：必需。当前元素\nindex\t可选。当前元素的索引值。\narr\t可选。当前元素所属的数组对象。\nthisValue：可选。传递给函数的值一般用 "this" 值。如果这个参数为空， "undefined" 会传递给 "this" 值\n')])])]),t("h3",{attrs:{id:"for-in"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#for-in"}},[a._v("#")]),a._v(" for in")]),a._v(" "),t("blockquote",[t("p",[a._v("for(var item in arr|obj){} 可以用于遍历数组和对象")])]),a._v(" "),t("ul",[t("li",[a._v("遍历数组时，item 表示索引值， arr 表示当前索引值对应的元素 arr[item]")]),a._v(" "),t("li",[a._v("遍历对象时，item 表示 key 值，arr 表示 key 值对应的 value 值 obj[item]")]),a._v(" "),t("li",[a._v("for in 一般循环遍历的都是对象的属性，遍历对象本身的所有可枚举属性，以及对象从其构造函数原型中继承的属性")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var obj = {a:1, b:2, c:3};\nfor (let item in obj) {\n  console.log(\"obj.\" + item + \" = \" + obj[item]);\n}\n// obj.a = 1\n// obj.b = 2\n// obj.c = 3\nvar arr = ['a','b','c'];\nfor (var item in arr) {\n    console.log(item) //0 1 2\n    console.log(arr[item]) //a b c\n}\n")])])]),t("h3",{attrs:{id:"for-of"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#for-of"}},[a._v("#")]),a._v(" for of")]),a._v(" "),t("ul",[t("li",[a._v("ES6 中新增加的语法 for of 语句创建一个循环来迭代可迭代的对象。在 ES6 中引入的 for of 循环，以替代 for in 和 forEach() ，并支持新的迭代协议。for of 允许你遍历 Arrays（数组）, Strings（字符串）, Maps（映射）, Sets（集合）等可迭代的数据结构等。")])]),a._v(" "),t("p",[a._v("循环一个数组")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("\nlet arr = ['A', 'B', 'C']\nfor (let val of arr) {\n    console.log(val)\n}\n// A B C\n")])])]),t("p",[a._v("循环一个字符串")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('let iterable = "abc";\nfor (let value of iterable) {\n  console.log(value);\n}\n// "a"\n// "b"\n// "c"\n')])])]),t("p",[a._v("循环一个 Map")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('let iterable = new Map([["a", 1], ["b", 2], ["c", 3]]);\nfor (let [key, value] of iterable) {\n  console.log(value);\n}\n// 1\n// 2\n// 3\n\nfor (let entry of iterable) {\n  console.log(entry);\n}\n// [a, 1]\n// [b, 2]\n// [c, 3]\n')])])]),t("p",[a._v("循环一个 Set")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let iterable = new Set([1, 1, 2, 2, 3, 3]);\nfor (let value of iterable) {\n  console.log(value);\n}\n// 1\n// 2\n// 3\n")])])]),t("h3",{attrs:{id:"some"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#some"}},[a._v("#")]),a._v(" some")]),a._v(" "),t("blockquote",[t("p",[a._v("array.some(function(currentValue,index,arr),thisValue)")])]),a._v(" "),t("ul",[t("li",[a._v("currentValue 必须。当前元素的值")]),a._v(" "),t("li",[a._v("index 可选。当前元素的索引值")]),a._v(" "),t("li",[a._v("arr 可选。当前元素属于的数组对象")]),a._v(" "),t("li",[a._v('thisValue 可选。对象作为该执行回调时使用，传递给函数，用作 "this" 的值。如果省略了 thisValue ，"this" 的值为 "undefined"\n'),t("br")])]),a._v(" "),t("p",[t("strong",[a._v("特点")]),a._v(" ：")]),a._v(" "),t("ol",[t("li",[a._v("some() 不会改变原始数组")]),a._v(" "),t("li",[a._v("some() 不会对空数组进行检测")]),a._v(" "),t("li",[a._v("如果有一个元素满足条件，则表达式返回 true , 剩余的元素不会再执行检测,如果没有满足条件的元素，则返回 false。")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const array = [1, 2, 3, 4, 5];\n// 能被2整除\nconst even = (element) => element % 2 === 0;\n// 判断数组里是否有能被2整除的\nconsole.log(array.some(even));  // true\n")])])]),t("h3",{attrs:{id:"filter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#filter"}},[a._v("#")]),a._v(" filter")]),a._v(" "),t("blockquote",[t("p",[a._v("array.filter(function(currentValue,index,arr), thisValue)")])]),a._v(" "),t("ul",[t("li",[a._v("currentValue 必须。当前元素的值")]),a._v(" "),t("li",[a._v("index 可选。当前元素的索引值")]),a._v(" "),t("li",[a._v("arr 可选。当前元素属于的数组对象")]),a._v(" "),t("li",[a._v('thisValue 可选。对象作为该执行回调时使用，传递给函数，用作 "this" 的值。如果省略了 thisValue ，"this" 的值为 "undefined"\n'),t("br")])]),a._v(" "),t("p",[t("strong",[a._v("特点")]),a._v(" ：")]),a._v(" "),t("ol",[t("li",[a._v("filter() 不会改变原始数组")]),a._v(" "),t("li",[a._v("filter() 不会对空数组进行检测")]),a._v(" "),t("li",[a._v("返回一个新的数组,新数组中的元素是通过检查指定数组中符合条件的所有元素。")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const arr = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present']\nconst result = words.filter(word => word.length > 6);\nconsole.log(result); // [\"exuberant\", \"destruction\", \"present\"]\n")])])]),t("p",[t("strong",[a._v("小技巧")])]),a._v(" "),t("ul",[t("li",[a._v("去掉数组中的 undefind "),t("br"),a._v("\narray.filter(boolean)")]),a._v(" "),t("li",[a._v("将数组数据都转换成 Number 类型 "),t("br"),a._v("\narray.filter(Number)")])]),a._v(" "),t("h3",{attrs:{id:"map"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[a._v("#")]),a._v(" map")]),a._v(" "),t("blockquote",[t("p",[a._v("array.map(function(currentValue,index,arr), thisValue)")])]),a._v(" "),t("ul",[t("li",[a._v("currentValue 必须。当前元素的值")]),a._v(" "),t("li",[a._v("index 可选。当前元素的索引值")]),a._v(" "),t("li",[a._v("arr 可选。当前元素属于的数组对象")]),a._v(" "),t("li",[a._v('thisValue 可选。对象作为该执行回调时使用，传递给函数，用作 "this" 的值。如果省略了 thisValue ，"this" 的值为 "undefined"\n'),t("br")])]),a._v(" "),t("p",[t("strong",[a._v("特点")]),a._v(" ：")]),a._v(" "),t("ol",[t("li",[a._v("map() 不会改变原始数组")]),a._v(" "),t("li",[a._v("map() 不会对空数组进行检测")]),a._v(" "),t("li",[a._v("返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。")]),a._v(" "),t("li",[a._v("需要配合 return 进行回调")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const array = [1, 3, 6, 9];\nconst newArray = array.map(function (value) {\n  return value + 1;\n});\nconsole.log(newArray);\nconsole.log(array);\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);