(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{255:function(t,e,a){"use strict";a.r(e);var r=a(28),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"对象扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象扩展"}},[t._v("#")]),t._v(" 对象扩展")]),t._v(" "),a("h2",{attrs:{id:"enumerable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#enumerable"}},[t._v("#")]),t._v(" enumerable")]),t._v(" "),a("h3",{attrs:{id:"概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),a("p",[t._v("可检举性，如果该属性为 false，会忽略该属性")]),t._v(" "),a("h3",{attrs:{id:"作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[t._v("#")]),t._v(" 作用")]),t._v(" "),a("p",[t._v("让某些属性可以规避掉 for...in 操作，不然所有内部属性和方法都会被遍历到。")]),t._v(" "),a("h3",{attrs:{id:"可检举的操纵"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可检举的操纵"}},[t._v("#")]),t._v(" 可检举的操纵")]),t._v(" "),a("ul",[a("li",[t._v("for...in 循环：只遍历对象自身的和继承的可枚举的属性。")]),t._v(" "),a("li",[t._v("Object.keys()：返回对象自身的所有可枚举的属性的键名。")]),t._v(" "),a("li",[t._v("JSON.stringify()：只串行化对象自身的可枚举的属性。")]),t._v(" "),a("li",[t._v("Object.assign()： 只拷贝对象自身的可枚举的属性。")])]),t._v(" "),a("h3",{attrs:{id:"建议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#建议"}},[t._v("#")]),t._v(" 建议")]),t._v(" "),a("p",[t._v("尽量不要用 for...in 循环，而用 Object.keys()代替。")]),t._v(" "),a("h2",{attrs:{id:"属性的遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性的遍历"}},[t._v("#")]),t._v(" 属性的遍历")]),t._v(" "),a("h3",{attrs:{id:"for-in"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-in"}},[t._v("#")]),t._v(" for...in")]),t._v(" "),a("p",[t._v("for...in 循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。")]),t._v(" "),a("h3",{attrs:{id:"object-keys-obj"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-keys-obj"}},[t._v("#")]),t._v(" Object.keys(obj)")]),t._v(" "),a("p",[t._v("Object.keys 返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名。")]),t._v(" "),a("h3",{attrs:{id:"object-getownpropertynames-obj"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-getownpropertynames-obj"}},[t._v("#")]),t._v(" Object.getOwnPropertyNames(obj)")]),t._v(" "),a("p",[t._v("Object.getOwnPropertyNames 返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名。")]),t._v(" "),a("h3",{attrs:{id:"object-getownpropertysymbols-obj"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-getownpropertysymbols-obj"}},[t._v("#")]),t._v(" Object.getOwnPropertySymbols(obj)")]),t._v(" "),a("p",[t._v("Object.getOwnPropertySymbols 返回一个数组，包含对象自身的所有 Symbol 属性的键名。")]),t._v(" "),a("h3",{attrs:{id:"reflect-ownkeys-obj"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reflect-ownkeys-obj"}},[t._v("#")]),t._v(" Reflect.ownKeys(obj)")]),t._v(" "),a("p",[t._v("Reflect.ownKeys 返回一个数组，包含对象自身的所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举。")])])}),[],!1,null,null,null);e.default=s.exports}}]);